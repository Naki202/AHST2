-- AHS 5.4 - Full with Extended Weapons + ESP integration
-- Bản tối ưu cache ragdoll, pool Target List GUI, giảm tần suất update ESP offset

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UIS = game:GetService("UserInputService")
local Camera = workspace.CurrentCamera
local LocalPlayer = Players.LocalPlayer

-- Settings
local AimbotToggle = false
local HoldingWeapon = false
local AutoWeaponEnabled = true
local AimPart = "Head"
local TeamCheck = true
local DeadCheck = true
local FriendsCheck = true
local WallCheck = true
local PredictionEnabled = true
local ESPEnabled = true
local FOV = 100

-- Prediction tuning
local BulletSpeed = 500          -- tốc độ “ảo” (stud/giây), 500–700 tuỳ vũ khí
local PredictionStrength = 0.85  -- 0.50 → 1.00 (giảm nếu còn overshoot)
------------------------------------------------------------------
-- =====  Ping Tracker + Auto-Tuner  =====
------------------------------------------------------------------
local StatsService   = game:GetService("Stats")

-- Giá trị mặc định & hệ số khung giới hạn
local CurrentPingMs  = 100
local LateralFactor  = 0.55   -- sẽ tự thay đổi
local ForwardFactor  = 0.90

-- Bạn có thể xem realtime trên hub nếu muốn:
--   PredLabel.Text .. ("\nPing: %d ms"):format(CurrentPingMs)

-- Hàm lấy ping
local function readPing()
    local net   = StatsService:FindFirstChild("Network")
    local pingO = net and net:FindFirstChild("Ping")
    if not pingO then return nil end
    return tonumber(pingO:GetValueString():match("%d+"))
end

-- Tính hệ số theo ping
local function tuneFactors(ms)
    -- Clamp 80-999 ms theo yêu cầu
    ms = math.clamp(ms, 80, 999)

    -- Lateral giảm dần khi ping cao (bớt “vượt đầu”)
    --   80 ms  → 0.60  |  999 ms → 0.45
    LateralFactor = 0.60 - (ms - 80) * 0.00015
    -- Forward tăng dần khi ping cao (bớt “dame ảo”)
    --   80 ms  → 0.85  |  999 ms → 0.95
    ForwardFactor = 0.85 + (ms - 80) * 0.00011
end

-- Luồng cập nhật 2 s/lần (rất nhẹ)
coroutine.wrap(function()
    while true do
        local ms = readPing()
        if ms then
            CurrentPingMs = ms
            tuneFactors(ms)
        end
        wait(2)
    end
end)()
------------------------------------------------------------------
-- =====  End Ping Tracker + Auto-Tuner  =====
------------------------------------------------------------------

local RangedWeapons = {
    -- Pistols
    ["Beretta"] = true,
    ["G-17"] = true,
    ["TEC-9"] = true,
    ["M1911"] = true,
    ["Deagle"] = true,
    ["Magnum"] = true,
    ["G-18"] = true,
    ["Glock"] = true,
    ["USP"] = true,

    -- Submachine Guns
    ["Uzi"] = true,
    ["MAC-10"] = true,
    ["UMP-45"] = true,
    ["MP5"] = true,

    -- Assault Rifles
    ["M4A1"] = true,
    ["AKM"] = true,
    ["AK-47"] = true,
    ["M16"] = true,
    ["Suppressed UZI"] = true,
    ["Scar"] = true,
    ["AK-74U"] = true,

    -- Shotguns
    ["Mare"] = true,
    ["M590"] = true,
    ["FNP-45"] = true,
    ["Sawn-Off"] = true,
    ["Super-Shorty"] = true,
    ["Ithaca-37"] = true,

    -- Sniper Rifles
    ["AWP"] = true,
    ["M24"] = true,

    -- Heavy Weapons
    ["SKS"] = true,
    ["M60"] = true,
    ["AKS-74U"] = true,
}

-- GUI Setup
local gui = Instance.new("ScreenGui")
gui.Name = "AHS"
gui.ResetOnSpawn = false
gui.Parent = LocalPlayer:WaitForChild("PlayerGui")

local toggleBtn = Instance.new("TextButton", gui)
toggleBtn.Size = UDim2.new(0, 100, 0, 30)
toggleBtn.Position = UDim2.new(0, 10, 0.4, 0)
toggleBtn.Text = "Open AHS"
toggleBtn.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
toggleBtn.TextColor3 = Color3.new(1, 1, 1)

local mainFrame = Instance.new("Frame", gui)
mainFrame.Size = UDim2.new(0, 260, 0, 530)
mainFrame.Position = UDim2.new(0, 10, 0.45, 0)
mainFrame.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
mainFrame.Visible = false

toggleBtn.MouseButton1Click:Connect(function()
    mainFrame.Visible = not mainFrame.Visible
    toggleBtn.Text = mainFrame.Visible and "Close AHS" or "Open AHS"
end)

-- Drag GUI
local dragging, dragStart, startPos
mainFrame.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.Touch or input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = true
        dragStart = input.Position
        startPos = mainFrame.Position
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then dragging = false end
        end)
    end
end)

UIS.InputChanged:Connect(function(input)
    if dragging and (input.UserInputType == Enum.UserInputType.Touch or input.UserInputType == Enum.UserInputType.MouseMovement) then
        local delta = input.Position - dragStart
        mainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end
end)

-- UI toggles creation helper
local y = 10
local function createToggle(name, default, callback)
    local btn = Instance.new("TextButton", mainFrame)
    btn.Size = UDim2.new(1, -20, 0, 25)
    btn.Position = UDim2.new(0, 10, 0, y)
    btn.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    btn.TextColor3 = Color3.new(1, 1, 1)
    btn.Font = Enum.Font.SourceSans
    btn.TextSize = 18
    btn.Text = name .. ": " .. (default and "ON" or "OFF")
    local state = default
    btn.MouseButton1Click:Connect(function()
        state = not state
        btn.Text = name .. ": " .. (state and "ON" or "OFF")
        callback(state)
    end)
    y += 30
end

createToggle("Aimbot", false, function(v) AimbotToggle = v end)
createToggle("Auto Weapon Detect", true, function(v) AutoWeaponEnabled = v end)
createToggle("Prediction", true, function(v) PredictionEnabled = v end)
createToggle("Team Check", true, function(v) TeamCheck = v end)
createToggle("Wall Check", true, function(v) WallCheck = v end)
createToggle("Dead Check", true, function(v) DeadCheck = v end)
createToggle("Friends Check", true, function(v) FriendsCheck = v end)
createToggle("Aim Head/Torso", true, function(v) AimPart = v and "Head" or "Torso" end)
createToggle("ESP", true, function(v)
    ESPEnabled = v
    for p, billboard in pairs(ESP_Objects) do
        if billboard and billboard.Parent then
            billboard.Enabled = ESPEnabled
        end
    end
end)

local fovLabel = Instance.new("TextLabel", mainFrame)
fovLabel.Size = UDim2.new(1, -20, 0, 20)
fovLabel.Position = UDim2.new(0, 10, 0, y)
fovLabel.Text = "FOV: " .. FOV
fovLabel.TextColor3 = Color3.new(1, 1, 1)
fovLabel.BackgroundTransparency = 1
y += 20

local fovSlider = Instance.new("TextButton", mainFrame)
fovSlider.Size = UDim2.new(1, -20, 0, 25)
fovSlider.Position = UDim2.new(0, 10, 0, y)
fovSlider.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
fovSlider.TextColor3 = Color3.new(1, 1, 1)
fovSlider.Text = "Increase FOV"
fovSlider.MouseButton1Click:Connect(function()
    FOV = (FOV >= 200) and 50 or FOV + 25
    fovLabel.Text = "FOV: " .. tostring(FOV)
end)
y += 35

-- =========  Prediction Strength UI  =========
-- 1) Khai báo trước, tạm = nil
local predLabel

-- 2) Hàm cập-nhật (kiểm tra nil cho chắc)
local function updatePredLabel()
    if predLabel then
        predLabel.Text = ("PredStrength: %.2f"):format(PredictionStrength)
    end
end

-- 3) Tạo Label (TextButton)
predLabel = Instance.new("TextButton")
predLabel.Size = UDim2.new(1, -20, 0, 25)
predLabel.Position = UDim2.new(0, 10, 0, y)
predLabel.BackgroundTransparency = 1
predLabel.TextColor3 = Color3.new(1,1,1)
predLabel.Font = Enum.Font.SourceSansBold
predLabel.TextSize = 18
predLabel.Parent = mainFrame
updatePredLabel()            -- giờ predLabel đã tồn tại
y += 30

-- Nút “–”
local minusBtn = Instance.new("TextButton", mainFrame)
minusBtn.Size = UDim2.new(0.48, -15, 0, 25)
minusBtn.Position = UDim2.new(0, 10, 0, y)
minusBtn.BackgroundColor3 = Color3.fromRGB(50,50,50)
minusBtn.TextColor3 = Color3.new(1,1,1)
minusBtn.Text = "-"

-- Nút “+”
local plusBtn = minusBtn:Clone()
plusBtn.Position = UDim2.new(0.52, 5, 0, y)
plusBtn.Text = "+"

minusBtn.Parent, plusBtn.Parent = mainFrame, mainFrame
y += 35

-- Xử lý tăng/giảm
local function changePred(delta)
    PredictionStrength = math.clamp(PredictionStrength + delta, 0.50, 1)
    updatePredLabel()
end
minusBtn.MouseButton1Click:Connect(function() changePred(-0.05) end)
plusBtn.MouseButton1Click:Connect(function() changePred( 0.05) end)

-- Nhập tay khi bấm vào nhãn
predLabel.MouseButton1Click:Connect(function()
    -- Tạo TextBox tạm
    local box = Instance.new("TextBox", mainFrame)
    box.Size = predLabel.Size
    box.Position = predLabel.Position
    box.Text = tostring(PredictionStrength)
    box.BackgroundColor3 = Color3.fromRGB(30,30,30)
    box.TextColor3 = Color3.new(1,1,1)
    box.Font = Enum.Font.SourceSansBold
    box.TextSize = 18
    box.ClearTextOnFocus = false
    box.FocusLost:Connect(function(enter)
        if enter then
            local v = tonumber(box.Text)
            if v then
                PredictionStrength = math.clamp(v, 0.50, 1)
            end
        end
        updatePredLabel()
        box:Destroy()
    end)
    box:CaptureFocus()
end)

-- Auto detect weapon state
local function UpdateWeaponState()
    local tool = LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Tool")
    HoldingWeapon = (tool and RangedWeapons[tool.Name]) and true or false
end

if LocalPlayer.Character then
    LocalPlayer.Character.ChildAdded:Connect(UpdateWeaponState)
    LocalPlayer.Character.ChildRemoved:Connect(UpdateWeaponState)
end

LocalPlayer.CharacterAdded:Connect(function(char)
    char.ChildAdded:Connect(UpdateWeaponState)
    char.ChildRemoved:Connect(UpdateWeaponState)
    gui.Parent = LocalPlayer:WaitForChild("PlayerGui")
end)

-- FOV Circle
local FOVCircle = Drawing.new("Circle")
FOVCircle.Thickness = 1
FOVCircle.Filled = false
FOVCircle.Color = Color3.new(1, 1, 1)
FOVCircle.Visible = true

------------------------------------------------------------------
-- =====  Predict with Ping-Aware Lateral / Forward  =====
------------------------------------------------------------------
local BulletSpeed = 550   -- giữ nguyên hoặc điều chỉnh sau

local function Predict(part)
    if not PredictionEnabled then return part.Position end

    local origin    = Camera.CFrame.Position
    local targetPos = part.Position
    local velocity  = part.Velocity
    local dir       = (targetPos - origin).Unit
    local distance  = (origin - targetPos).Magnitude

    -- t = thời gian “đạn” bay + ping
    local t = (distance / BulletSpeed) + (CurrentPingMs / 1000)

    -- Tách vận tốc
    local forwardVel = dir * velocity:Dot(dir)
    local lateralVel = velocity - forwardVel

    return targetPos
         + forwardVel * t * ForwardFactor
         + lateralVel * t * LateralFactor
end
------------------------------------------------------------------
-- =====  End Predict  =====
------------------------------------------------------------------

-- Ragdoll cache optimization
local ragdollCache = {}

coroutine.wrap(function()
    while true do
        for _, plr in pairs(Players:GetPlayers()) do
            local char = plr.Character
            if char then
                ragdollCache[plr] = (function()
                    if not char then return false end
                    local motors = {}
                    for _, descendant in pairs(char:GetDescendants()) do
                        if descendant:IsA("Motor6D") then
                            motors[#motors + 1] = descendant
                        end
                    end
                    if #motors == 0 then return true end
                    local enabledCount = 0
                    for _, motor in pairs(motors) do
                        if motor.Enabled then enabledCount = enabledCount + 1 end
                    end
                    return enabledCount <= (#motors * 0.3)
                end)()
            else
                ragdollCache[plr] = false
            end
        end
        wait(0.5)
    end
end)()

-- Extended dead/downed check, combining humanoid state and cached ragdoll status
local function IsCharacterConsideredDeadOrDowned(character)
    if not character then return false end
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if not humanoid then return false end
    if humanoid.Health <= 0 then return true end
    local state = humanoid:GetState()
    if state == Enum.HumanoidStateType.Dead 
        or state == Enum.HumanoidStateType.FallingDown
        or state == Enum.HumanoidStateType.Ragdoll
        or state == Enum.HumanoidStateType.Physics then return true end
    local rootPart = character:FindFirstChild("HumanoidRootPart")
    if rootPart and rootPart.Position.Y < -300 then return true end
    local player = Players:GetPlayerFromCharacter(character)
    if player and ragdollCache[player] then return true end
    return false
end


-- Get closest target applying the optimized dead check and target list filter
local function GetClosest()
    local closest, minDist = nil, FOV
    
    for _, plr in pairs(Players:GetPlayers()) do
        if plr ~= LocalPlayer and plr.Character then
            local char = plr.Character
            local part = char:FindFirstChild(AimPart)
            local human = char:FindFirstChildOfClass("Humanoid")
            if part and human then
                if DeadCheck and IsCharacterConsideredDeadOrDowned(char) then continue end
                if TeamCheck and plr.Team == LocalPlayer.Team then continue end
                if FriendsCheck and LocalPlayer:IsFriendsWith(plr.UserId) then continue end
                local screenPos, onScreen = Camera:WorldToViewportPoint(part.Position)
                if not onScreen then continue end
                local dist = (Vector2.new(screenPos.X, screenPos.Y) - Vector2.new(Camera.ViewportSize.X/2, Camera.ViewportSize.Y/2)).Magnitude
                if dist < minDist then
                    if WallCheck then
                        local ray = Ray.new(Camera.CFrame.Position, (part.Position - Camera.CFrame.Position).Unit * 1000)
                        local ignoreList = {LocalPlayer.Character}
                        local hit = workspace:FindPartOnRayWithIgnoreList(ray, ignoreList)
                        if hit and not hit:IsDescendantOf(char) then continue end
                    end
                    closest = part
                    minDist = dist
                end
            end
        end
    end
    return closest
end

RunService.RenderStepped:Connect(function()
    FOVCircle.Position = Vector2.new(Camera.ViewportSize.X/2, Camera.ViewportSize.Y/2)
    FOVCircle.Radius = FOV
    if not AimbotToggle then return end
    if AutoWeaponEnabled and not HoldingWeapon then return end
    local target = GetClosest()
    if t